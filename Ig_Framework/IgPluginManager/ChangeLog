2007-03-29  Ianna Osborne <Ianna.Osborne@cern.ch>

	* test/BuildFile: Modify to use the CMSSW config.

2007-03-28  Ianna Osborne <Ianna.Osborne@cern.ch>

	* BuildFile: Modify to use the CMSSW config.

2007-03-20  Lassi A. Tuura  <lat@iki.fi>

	* test/PluginCaps*Module.cc: Replace "SEAL" strings with "IGUANA".

	* IgPluginManager.cc, IgModuleCache.h, IgModuleCache.cc,
	IgModule.h, IgModule.cc, IgModuleReg.h, IgModuleReg.cc:
	Switch to directly loading modules ('iglets') instead of using
	'*.reg' files.  This removes the intermediate IgModuleReg class
	and merges the relevant functionality to IgModule.  Rename cache
	file to '.iglets'.  Prevent modules from being linked against,
	forcing separation between shared libraries and dynamically loaded
	modules by requiring file name extension '.iglet' on dynamically
	loadable modules.  Always load modules using their full path, and
	report the full path on all occasions; this requires shared
	libraries and modules to be separate.  Switch the default sense of
	module unloading, do not unload shared libraries by default and do
	so only if $IGUANA_RELEASE_MODULES is set.  Switch the default
	sense of plug-in manager destruction to always destroy the manager
	and require call not to do so.  Look up modules ('iglets') in the
	dynamic linker load path if $IGUANA_PLUGINS is not set.  When
	parsing caches, report in log output everything found, not just
	the items with a live plug-in factory object.

2007-03-12  Ianna Osborne <Ianna.Osborne@cern.ch>

	* IgModuleDef.h: Switch to unused attribute to avoid warnings.
	
2007-03-06  Shahzad Muzaffar <Shahzad.Muzaffar@cern.ch>

	* bin/*, test/*, interface/*, src/*: Newly added package from Lassi.
	* BuildFile: Newly added.

2005-09-20  Lassi A. Tuura  <lat@iki.fi>

	* ModuleCache.cpp, Module.cpp: Make sure to clean up everything.

	* ModuleDescriptor.h, ModuleDescriptor.cpp: Add destructor.

	* PluginManager.h, PluginManager.cpp (deleteOnExit): Add method
	to optionally clean up the plug-in manager on exit, implemented
	via internal helper class that will trigger deletion according
	to policy selected at run-time.  Add some more logging.

2004-09-23  Lassi A. Tuura  <lat@iki.fi>

	* PluginInfo.h, PluginInfo.cpp (noFactory): Must be const.

	* Module.h, ModuleCache.h, Module.cpp, ModuleCache.cpp,
	PluginManager.cpp: Pass around a PluginManager pointer to more
	places and use the owning manager pointer where possible instead
	of resorting to PluginManager::get().

	* PluginFactory.h, PluginManager.h, PluginInfo.h, PluginInfo.cpp:
	Define a new feedback code for failures to materialise a plug-in
	factory when attaching a module that supposedly defined it.  Use
	it to generate a more detailed error description in plug-in
	factories, the simple assertion failure is not that helpful.
	Do it through the info base class to avoid repeating the same
	code in several places.

2004-06-03  Lassi A. Tuura  <lat@iki.fi>

	Fixes for bugs detected with GCC 3.4.
	* ModuleDef.h (DEFINE_SEAL_MODULE): Redefine such that the macro
	invocation can and must be followed by a semi-colon.	
	* PluginFactory.h: Add "this->" to some templates to ensure
	template-dependent name lookup kicks in.

2004-06-02  Lassi A. Tuura  <lat@iki.fi>

	* PluginFactory.h: Make the return type of the template argument
	function prototype a pointer (R *), not a value (R) to coax MSVC++
	7.1 to accept the code when R is an abstract class.  MSVC++ is
	believed to be in error here, much to everyone's surprise.
	* tests/PluginFactory/TestPluginFactory.h,
	tests/PluginFactory/TestPluginFactory.cpp,
	tests/PluginFactoryArgs/TestPluginFactoryArgs.h,
	tests/PluginFactoryArgs/TestPluginFactoryArgs.cpp:
	Adjust accordingly.

2004-06-01  Lassi A. Tuura  <lat@iki.fi>

	* ModuleCache.cpp (parse): Close cache files on read.

2004-05-24  Lassi A. Tuura  <lat@iki.fi>

	* PluginFactory.h: Extend factory overloading to 4 arguments.
	* tests/PluginFactoryArgs: New, test all argument combinations.

2004-05-24  Lassi A. Tuura  <lat@iki.fi>

	* tests/PluginInit: New, like PluginSample, but also test
	that statically constructed data is properly initialised.
	* tests/PluginCreation: Instantiate it.

2004-05-24  Lassi A. Tuura  <lat@iki.fi>

	* ModuleCache.cpp (scanModules): Use StringFormat.
	(reconstruct): Add more documentation and validation.
	* Module.cpp: Fix white-space.

2004-02-05  Pere Mato
	
        * Removed PLUGIN_MANAGER_API from class declarations to avoid
	  vc++7.1 warnings: Module, ModuleCache, ModuleDef,
	  ModuleDescriptor, ModuleReg, PluginCapabilities, PluginError,
	  PluginFactoryBase, PluginInfo, PluginManager

2003-11-26  Lassi A. Tuura  <lat@iki.fi>

	* PluginFactory.h: Simplify use from clients by removing the Info
	template argument.  Instead take a function prototype to indicate
	constructor arguments and generate the Info automatically.  Also
	automatically provide load()/create() method for the derived
	factory so all it needs to define is the get() method.
	* PluginInfo.h, PluginInfo.cpp: Take category tag as a string
	reference instead of a raw C string literal to clean up and make
	use from the new PluginFactory easier.
	* PluginCapabilities.h, PluginCapabilities.cpp, PluginDef.h,
	tests/PluginFactory/TestPluginFactory.h, TestPluginFactory.cpp:
	Adjust to PluginFactory changes.
	* PluginCapabilitiesInfo.h, PluginCapabilitiesInfo.cpp,
	tests/PluginFactory/TestPluginInfo.h, TestPluginInfo.cpp:
	Removed, now unnecessary.

2003-11-24  Lassi A. Tuura  <lat@iki.fi>

	* BuildFile: Update to have own stuff first, then uses.

	* tests/PluginFactory/BuildFile, tests/PluginSample/BuildFile:
	Update to have own stuff first, then uses.

	* ModuleCache.cpp (HEX): Fix typo that broke encoding.

	* PluginCapabilities.h, PluginCapabilities.cpp,
	PluginCapabilitiesInfo.h, PluginCapabilitiesInfo.cpp:
	New plug-in pseudo-factory for module capabilities that can be
	loaded for side effects.

	* Module.h, Module.cpp: Support separate capability entry point.

2003-10-27  Lassi A. Tuura  <lat@iki.fi>

	* PluginManager.cpp (initialise): Ignore empty path components.
	* tests/PluginNullPath/NoPath.cpp,
	tests/PluginNullPath/NullAllPath.cpp,
	tests/PluginNullPath/NullMidPath.cpp,
	tests/PluginNullPath/NullPrefixPath.cpp,
	tests/PluginNullPath/NullSuffixPath.cpp:
	New tests for various strange module paths.

	* tests/PluginCreation/BuildFile, tests/PluginCreation/OvalFile:
	Conform to test binary naming convention.

2003-10-27  Lassi A. Tuura  <lat@iki.fi>

	* PluginError.cpp: Remove unnecessary PluginParserError include.

2003-10-16  Lassi A. Tuura  <lat@iki.fi>

	* config.h (HAVE_BROKEN_DYNAMIC_DESTRUCTORS): Remove, replaced by
	run-time check in Module.cpp.
	* Module.cpp (unload): Remove compile-time check, use environment
	variable instead to disable unloading.

2003-10-7  Pere Mato

	* tests/PluginFactory/...: removed PLUGIN_MANAGER_FACTORY_API decl
	* tests/PluginSample/...: removed PLUGIN_MANAGER_SAMPLE_API  decl
	* /cmt : added directory for cmt builds

2003-09-11  Lassi A. Tuura  <lat@iki.fi>

	* Module.cpp (attach): Fix typo in the log message.
	(unload): Disable less code with broken destructors so that
	m_library gets reset properly, required to avoid an assertion
	failure in the destructor if the library fails to load.

2003-09-09  Lassi A. Tuura  <lat@iki.fi>

	* PluginDef.h (installFactory, installFactoryName): Fix template
	lookup to be standard conforming.  Required by icc, probably
	breaks other compilers.

2003-08-19  Lassi A. Tuura  <lat@iki.fi>

	* PluginManager.h, PluginManager.cpp: Add feedback handling.  Add
	protection against multiple initialisation.  Document.
	* ModuleCache.cpp, Module.cpp: Provide feedback.

2003-08-18  Lassi Tuura  <lassituura@pb-d-128-141-36-75.cern.ch>

	* PluginDef.h: New, split off definition from PluginFactory.  Now
	assumes the derived PluginFactory has a method "get()" to get the
	factory instance, and then calls normal methods on it; the static
	methods in PluginFactory are now gone.  This should avoid problems
	where compilers fail to unify global template global variables
	with dynamically loaded shared libraries -- "s_instance" in
	PluginFactory is now gone.  Also move all the template code back
	out from the class, we no longer should need that kludge for
	MSVC++ as we are not using member templates any more.
	* PluginFactory.h: Split off "Def" into PluginDef.  Move code
	back out into the end of the file since we should no longer be
	under MSVC++ limitations.
	* ModuleDef.h: Use PluginDef.

2003-07-02  Lassi A. Tuura  <lat@iki.fi>

	* MapUniqueIterator.h: Remove DLL API from template class.

	* ModuleDef.h: Add "seal" namespace scope into all the macros.

	* tests/PluginFactory/TestPluginInfo.h (class Factory): Fix API.

2003-05-22  Lassi A. Tuura  <lat@iki.fi>

	* Add documentation.

2003-05-20  Lassi A. Tuura  <lat@iki.fi>

	* ModuleCache.h, ModuleCache.cpp, ModuleReg.h, ModuleReg.cpp: When
	processing a directory, remember everything that was bad and add a
	memory of the bad files into the cache.  This causes the cache to
	be generated always even if some modules are bad, and causes bad
	modules to be ignored until they are corrected.  Document some of
	the data members and methods.

2003-05-19  Lassi A. Tuura  <lat@iki.fi>

	* ModuleDef.h (DEFINE_SEAL_PLUGIN): Force setting of name.
	(DEFINE_SEAL_PLUGIN_DEFAULT_NAME): New macro to register type
	into the factory by the stringified type argument name.
	(DEFINE_SEAL_PLUGIN_NAME): Document.  Harmonise argument names.
	(ModuleDef): Update class documentation.

	* PluginFactory.h (Def::declareName, Def::installFactoryName):
	Use by-value string arguments to help callback selection.

	* tests/PluginSample: Remove catalog label, use the new macro
	conventions instead.

	* tests/PluginDump: Moved to Foundation/PluginDumper as a
	stand-alone real program.

2003-05-16  Lassi A. Tuura  <lat@iki.fi>

	* Replace SealUtil and classlib with SealBase.  Migrate to the
	new by-value exception model.  Unify exception types.  Clean up
	warnings.

2003-05-07  Lassi A. Tuura  <lat@iki.fi>

	* All: Migrate to new classlib.
	* Module.h: Include SealUtil/SharedLibrary for namespace.
	* ModuleCache.cpp (notify): Undent log output.

2003-03-28  Lorenzo Moneta  <Lorenzo.Moneta@cern.ch>
	
	* ModuleCache.cpp: modified #include to point to SealUtil class
	DirIterator

	* ModuleDef.h, PluginManager.h: modified #include to point to
	SealUtil classes Callback, SearchPath

	* Module.cpp: remove #include <classlib/utilities> . It is not
	used.

2003-03-28  Massimo Marino  <Massimo_Marino@lbl.gov>

	* PluginManager.h, Module.h, ModuleCache.h, Module.cpp,
	ModuleReg.h, ModuleCache.cpp, PluginError.cpp: 
	modified #include to point to SealUtil classes.


2003-03-28  Lassi A. Tuura  <lat@iki.fi>

	* PluginError.h, PluginError.cpp, PluginParserError.h,
	PluginParserError.cpp, Module.cpp, ModuleCache.cpp,
	PluginManager.cpp: Unify exception handling.

2003-03-28  Lassi A. Tuura  <lat@iki.fi>

	* MapUniqueIterator.h, ModuleCache.h, ModuleDef.h,
	ModuleDescriptor.h, ModuleDescriptor.cpp: Fix indentation.

2003-03-28  Lassi A. Tuura  <lat@iki.fi>

	* tests/PluginFactory/TestPluginInfo.cpp: Fix category name
	to be the same in both places.

2003-03-28  Lassi A. Tuura  <lat@iki.fi>

	* Plug-in manager imported from IGUANA and adapted to SEAL
	naming conventions.  Added tests to exercise it.
