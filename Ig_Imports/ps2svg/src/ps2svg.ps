%!PS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ps2svg : A PostScript programme to convert PostScript files to SVG.
%
% Copyright 2001.  Ross Inglis (ringlis@ipv.com). All Rights Reserved.
%
% The usual legal stuff....
%
% This file may be freely copied and redistributed as long as:
%   1) This entire notice continues to be included in the file, 
%   2) If the file has been modified in any way, a notice of such
%      modification is conspicuously indicated.
%
% THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
% INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
% FITNESS FOR A PARTICULAR PURPOSE ARE  DISCLAIMED. IN NO EVENT SHALL THE
% CREATOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
% OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
% STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN ANY
% WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% What it does:
%
%    Reads an input PostScript program and converts all stroke,fill and show operators
%    into SVG.
%
% What it doesn't do:
%
%    Any kind of font handling. I wrote it to convert some hand-coded PostScript
%    diagrams to SVG. I wasn't bothered about font usage as that was minimal. I may
%    try to fix this at some point (its certainly possible).
%
%    PostScript code that directly calls the 'setmatrix' operator will break this program.
%
%
% $Revision: 1.1 $
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Ten step usage guide below....follow the (numbers)...
%
/svgdict 40 dict def svgdict begin

%
% (1) What you need.....
%
%       (a) This file (obviously)
%       (b) A PostScript interpreter. Best bet is GhostScript. If you are a real masochist
%           you may be able to use a locally attached printer provided you have the means
%           of collecting its comm's port output (and no, I haven't tried it). Note that this
%           code writes to a file (see step (4) below). That means Ghostscript's SAFER option
%           must NOT be used, it disables all file opens in write mode.
%       (c) A PostScript file to convert

%
% (2) Copy your postscript file to a place where you can edit it.
% (3) Add this file (the one you are looking at) to the FRONT of the postscript file.
%     When you are done come back to step (4).
%

%
% (4) Decide where you want the output to be sent. If using Ghostscript, a file is
%     the best bet. the default below is for a Windows system. If using a printer try %stdout.
%
% /opath (c:\\temp\\PS.svg) def
/opath (%stdout) def

%
% (5) Pick a font for text. Sorry, at the moment ps2svg does not even try to catch font
%     changes, all text will be output using this same font. You can always tweak the output
%     manually later.
%
% SVG Font that is applied to ALL text
%
/FontFamily (Times-Roman) def
/FontSize 10 def

%
% (6) Set ImageSize (to X Y) if you know the INPUT bounding box (in points). 
%     If you don't know, leave this comment this out and ps2svg will assume the image
%     fills the page of the output device.
%
% /ImageSize { 400 200 } def
/ImageSize { 594 840 } def	% Portrait A4'ish

%
% (7) Set to true to rotate page 90-degrees anticlockwise for a landscape PostScript file
%
/Landscape false def
%/Landscape true def

%
% (8) Set to true if you want the output resizeable. Set to false if fixed-size.
%     This only changes the svg preamble. You can always edit the SVG afterwards to fix it.
%
/Scaled true def

%
% (9) Enabling debug generates SVG id's for all paths and lots of %stderr output
%     Its not terribly useful, also, if you are talking to a printer the output will
%     mess up your SVG.
%
/debug false def			% Generates SVG id's and lots of stuff on path defined below
/dout (%stderr) (w) file def
%/dout (c:\\temp\\debug.txt) (w) file def

%
% (10) Run the file through your PostScript interpreter. (See comments in step (1) about
%      GhostScript's SAFER option. Test the output in your handy SVG viewer.
%

%
% (10A) If (usually as a result of direct setmatrix calls) you get readable output, but
%       transformed in some silly way (rotated or flipped) you can define an overriding
%       global matrix here that will be applied to all SVG output.  Otherwise leave
%       DocMatrix undefined.
%
% I used this example to correct a Microsoft Excel 'print to file'
%
%/DocMatrix { 
%	matrix 180 exch rotate -850 -600 matrix translate 1 index dup concatmatrix pop
%} def

%
% (10B) In a similar way, FontMatrix can be used to coerce text back into a readable
%       transformation. It will be applied to all <text/> elements before output.
%
% Also used to correct a Microsoft Excel output document
%
%/FontMatrix  5 -5 matrix scale def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% No more configuration below this line.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Internal variables. Don't touch.
%
/ts 40 string def
/svgid 1 def
/ofile opath (w) file def
/defaultstroke { 0 0 0 } def
/defaultfontfill { 0 0 0 } def
/defaultstrokewidth 1 def
/defaultmiterlimit 10 def

%
% Current stroke state
%
/svgstroke { 0 0 0 } def
/svgstrokewidth 1 def
/svglinecap 0 def
/svglinejoin 0 def
/svgmiterlimit defaultmiterlimit def

%
% ps2svg matrix stack
%
/svggsdepth 100 def		% max depth
/svgss svggsdepth array def
% Init the matrix stack with identity matrices
0 1 svggsdepth 1 sub { svgss exch matrix put } for
/svgsp 0 def			% SP

%
% Output primitives
%
/rval 10000 def		% Output to 4 D.P.
/sod { 
	cvr rval mul cvi 
	dup rval mod 0 eq { rval div cvi } { cvr rval div } ifelse
	ts cvs ofile exch writestring } def			% output number to .rval precision
/soi { cvi ts cvs ofile exch writestring } def	% output integer
/svgnl { ofile 13 write ofile 10 write } def	% output newline
/sos { ofile exch writestring } def				% output string
/sol { sos svgnl } def							% output string followed by newline
/soxy { 1 index sod (,) sos sod pop } def		% output X,Y pair
/somatrix { (matrix\() sos 
	dup 0 get sod (,) sos 
	dup 1 get sod (,) sos
	dup 2 get sod (,) sos 
	dup 3 get sod (,) sos 
	dup 4 get sod (,) sos 
	5 get sod (\)) sos
} def											% output matrix, svg style
/sorgb {
	(rgb\() sos 3 -1 roll 255 mul soi (,) sos 
	exch 255 mul soi (,) sos 255 mul soi (\)) sos
} def											% output rgb value, svg style

%
% String escaping
%
/esos2 {
		{ (&) search { sos pop (&amp;) sos } { sos exit } ifelse } loop
} def
/esos {
		{ (<) search { esos2 pop (&lt;) sos } { esos2 exit } ifelse } loop
} def

% Debug output
/ds { dout exch writestring } def
/di { ( ) ds ts cvs dout exch writestring } def
/dl { dout 13 write dout 10 write } def
/dm {
	dup 0 get di (,) ds
	dup 1 get di (,) ds
	dup 2 get di (,) ds
	dup 3 get di (,) ds
	dup 4 get di (,) ds
	5 get di
} def

/simatrix matrix initmatrix def					% Initial matrix

% Figure out the page size
svgdict /ImageSize known {
	ImageSize /svgvy exch def /svgvx exch def
} {
	clippath pathbbox /sury exch def /surx exch def /slly exch def /sllx exch def
	/svgvx surx sllx sub def
	/svgvy sury slly sub def
} ifelse

% The matrix that translates the original coordinate scheme into SVG coords
/svgcmatrix [ 1 0 0 -1 0 svgvy ] def 

Landscape {
	-90 matrix rotate svgcmatrix svgcmatrix concatmatrix pop
	svgvy neg 0 matrix translate svgcmatrix svgcmatrix concatmatrix pop
} if

% The 'currently applied' svg output matrix
/svgomatrix [ 1 0 0 1 0 0 ] def
/svgfmatrix [ 1 0 0 -1 0 0 ] def

% No output matrix currently applied
/inmatrix false def

% No stroke group currently applied
/instroke false def

/writeprologue {
	(<?xml version="1.0" standalone="no"?>) sol svgnl
	(<!-- Translated from PostScript by ps2svg.ps. Ross Inglis. ringlis@ipv.com -->) sol svgnl
	(<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">) sol svgnl
	(<svg width=") sos
	Scaled {
		(100%) sos
	} {
		Landscape { svgvy } { svgvx } ifelse soi (") sos
		( height=") sos Landscape { svgvx } { svgvy } ifelse soi
	} ifelse
	(") sos( viewBox="0 0 ) sos 
	Landscape { svgvy sod ofile 32 write svgvx sod } { svgvx sod ofile 32 write svgvy sod } ifelse
	(" stroke=") sos
	defaultstroke sorgb (" fill="none">) sol
	(<style type="text/css">text {font-family:) sos FontFamily sos
	(;font-size:) sos FontSize soi (;fill:black;stroke:none}</style>) sol

	(<g stroke-miterlimit="10") sos
		svgdict /DocMatrix known {
			( transform=") sos DocMatrix somatrix (") sos
		} if
	(>) sol

} def

/writeepilogue {
	exitstroke
	inmatrix { (</g>) sol } if
	(</g>) sol
	(</svg>) sol
} def

% Hmm. Gotta be a better way :-)
/eqmatrix {
	dup 0 get 2 index 0 get eq {
		dup 1 get 2 index 1 get eq {
			dup 2 get 2 index 2 get eq {
				dup 3 get 2 index 3 get eq {
					dup 4 get 2 index 4 get eq {
						dup 5 get 2 index 5 get eq {
							true
						} {
							false
						} ifelse
					} {
						false
					} ifelse
				} {
					false
				} ifelse
			} {
				false
			} ifelse
		} {
			false
		} ifelse
	} {
		false
	} ifelse
	exch pop exch pop
} def

/eqrgb {
	3 index eq { 
		3 index eq {
			3 index eq {
				pop pop pop true
			} { 
				pop pop pop false
			} ifelse
		} { 
			pop pop pop pop false
		} ifelse
	} {
		pop pop pop pop pop false
	} ifelse
} def

/checkmatrix {
	debug { (checkmatrix id=) ds svgid di (=>) ds svgcmatrix dm ( ==) ds svgomatrix dm dl } if
	svgcmatrix svgomatrix eqmatrix not {
		exitstroke
		inmatrix { (</g>) sol } if
		(<g transform=") sos svgcmatrix somatrix (">) sol
		/inmatrix true def
		svgcmatrix svgomatrix copy pop
		debug { (svgomatrix set to svgcmatrix) ds dl } if
	} if
} def

/exitstroke {
	instroke {
		(</g>) sol
		/instroke false def
	} if
	/svgstroke { 0 0 0 } def
	/svgstrokewidth 1 def
	/svglinecap 0 def
	/svglinejoin 0 def
	/svgmiterlimit defaultmiterlimit def
} def

%
% Check current stroke settings and apply group if not default
%
/checkstroke {
	% Check settings against current stroke group
	currentrgbcolor svgstroke eqrgb not 
	currentlinewidth svgstrokewidth eq not
	currentlinecap svglinecap eq not
	currentlinejoin svglinejoin eq not
	currentmiterlimit svgmiterlimit eq not
	or or or or {
		% Settings did not match current group. Exit and check again
		exitstroke
		currentrgbcolor svgstroke eqrgb not 
		currentlinewidth svgstrokewidth eq not
		currentlinecap svglinecap eq not
		currentlinejoin svglinejoin eq not
		currentmiterlimit svgmiterlimit eq not
		or or or or {
			(<g) sos
			currentrgbcolor defaultstroke eqrgb not {
				( stroke=") sos currentrgbcolor sorgb (") sos 
				/svgstroke { currentrgbcolor } def
			} if
			currentlinewidth defaultstrokewidth eq not {
				( stroke-width=") sos currentlinewidth sod (") sos 
				/svgstrokewidth currentlinewidth def
			} if
			currentlinecap 0 eq not {
				( stroke-linecap=") sos
					currentlinecap 1 eq {
						(round) sos
					} { 
						currentlinecap 2 eq {
							(square) sos
						} {
							% shouldn't get here, but I have to put something
							(butt) sos
						} ifelse
					} ifelse
				(") sos
				/svglinecap currentlinecap def
			} if
			currentlinejoin 0 eq not {
				( stroke-linejoin=") sos
					currentlinejoin 1 eq {
						(round) sos
					} { 
						currentlinejoin 2 eq {
							(bevel) sos
						} {
							% shouldn't get here, but I have to put something
							(miter) sos
						} ifelse
					} ifelse
				(") sos
				/svglinejoin currentlinejoin def
			} if
			currentmiterlimit 10 eq not {
				( stroke-miterlimit=") sos
				currentmiterlimit soi
				(") sos
				/svgmiterlimit currentmiterlimit def
			} if
			(>) sol
			/instroke true def
		} if
	} if
} def

%
% Apply font colour if NOT black
%
/checkfontfill {
	currentrgbcolor defaultfontfill eqrgb not { ( style="fill:) sos currentrgbcolor sorgb (") sos } if
} def

% Dash is assumed to be rare, so is applied on a per-stroke basis
/checkdash {
	currentdash pop length 0 eq { false } { true } ifelse {
		( stroke-dasharray=") sos
		currentdash pop
		0 1 2 index length 1 sub { 1 index exch get soi } for pop (") sos
	} if
} def

%
% Link to original output functions
%
/Show { show } bind def
/Ashow { ashow } bind def
/Awidthshow { awidthshow } bind def
/Kshow { kshow } bind def
/Widthshow { widthshow } bind def
/Stroke { stroke } bind def
/Fill { fill } bind def
/Eofill { eofill } bind def
/Scale { scale } bind def
/Rotate { rotate } bind def
/Translate { translate } bind def
/Gsave { gsave } bind def
/Grestore { grestore } bind def
/Setmatrix { setmatrix } bind def
/Concatmatrix { concatmatrix } bind def
/Concat { concat } bind def

% Level-2
/xshow where {
	/islvl2 true def
	pop
	/Xshow { xshow } bind def
	/Xyshow { xyshow } bind def
} {
	/islvl2 false def
} ifelse

end

%
% Overrides
%
/stroke { 
	svgdict begin
		checkmatrix
		checkstroke
		(<path) sos
		debug { ( id="p) sos svgid cvi sod (") sos /svgid svgid 1 add def } if
		checkdash
		( d=") sos 
		{ (M) sos soxy } %move
		{ (L) sos soxy } %line
		{ (C) sos 6 4 roll soxy (,) sos 4 2 roll soxy (,) sos soxy } %curve
		{ (Z) sos } %close
		pathforall ("/>) sol
	Stroke end
} def

/fill { 
	svgdict begin
		checkmatrix
		(<path) sos
		debug { ( id="p) sos svgid cvi sod (") sos /svgid svgid 1 add def } if
		( stroke="none" fill=") sos currentrgbcolor sorgb
		(" d=") sos /svgid svgid 1 add def
		{ (M) sos soxy } %move
		{ (L) sos soxy } %line
		{ (C) sos 6 4 roll soxy (,) sos 4 2 roll soxy (,) sos soxy } %curve
		{ (Z) sos } %close
		pathforall ("/>) sol
	Fill end
} def
% Ditto, but uses evenodd fill-rule
/eofill { 
	svgdict begin
		checkmatrix
		(<path) sos
		debug { ( id="p) sos svgid cvi sod (") sos /svgid svgid 1 add def } if
		( stroke="none" fill-rule="evenodd" fill=") sos currentrgbcolor sorgb
		(" d=") sos /svgid svgid 1 add def
		{ (M) sos soxy } %move
		{ (L) sos soxy } %line
		{ (C) sos 6 4 roll soxy (,) sos 4 2 roll soxy (,) sos soxy } %curve
		{ (Z) sos } %close
		pathforall ("/>) sol
	Eofill end
} def

/CmnShow {
	checkmatrix
	/svgid svgid 1 add def
	% Because Fonts are 'upside-down' in SVG. I apply an invert scale after the translate
	(<text transform="translate\() sos currentpoint soxy (\) ) sos 
	currentdict /FontMatrix known {
		FontMatrix svgfmatrix matrix concatmatrix somatrix
	} { 
		svgfmatrix somatrix
	} ifelse
	(") sos 
	checkfontfill
	(>) sos
	dup esos (</text>) sol
} def
/show { svgdict begin CmnShow Show end } def
/ashow { svgdict begin CmnShow Ashow end } def
/awidthshow { svgdict begin CmnShow Awidthshow end } def
/kshow { svgdict begin CmnShow Kshow end } def
/widthshow { svgdict begin CmnShow Widthshow end } def
svgdict begin islvl2 end {
	/xshow { exch svgdict begin CmnShow exch Xshow end } def
	/xyshow { exch svgdict begin CmnShow exch Xyshow end } def
} if

/scale { 
	svgdict begin 
	dup type /arraytype ne {
		debug { (scale) ds 2 copy exch di di svgcmatrix dm } if 
		2 copy matrix Scale svgcmatrix svgcmatrix Concatmatrix pop
		debug { ( =) ds svgcmatrix dm dl } if
	} if
	Scale end } def
/rotate { svgdict begin 
	dup type /arraytype ne {
		debug { (rotate) ds dup di svgcmatrix dm } if
		dup matrix Rotate svgcmatrix svgcmatrix Concatmatrix pop
		debug { ( =) ds svgcmatrix dm dl } if
	} if
	Rotate end } def
/translate { 
	svgdict begin 
	dup type /arraytype ne {
		debug { (translate) ds 2 copy exch di di svgcmatrix dm } if
		2 copy matrix Translate svgcmatrix svgcmatrix Concatmatrix pop
		debug { ( =) ds svgcmatrix dm dl } if
	} if
	Translate end } def
/gsave { svgdict begin
	debug { (gsave) ds dl } if
	svgsp svggsdepth ge { stackoverflow } if
	svgss svgsp get svgcmatrix exch copy pop
	debug { (pushed matrix) ds svgcmatrix dm dl } if
	/svgsp svgsp 1 add def
	Gsave end } def
/grestore { svgdict begin debug { (grestore) ds dl } if
	svgsp 0 le { stackunderflow } if
	/svgsp svgsp 1 sub def
	svgss svgsp get svgcmatrix copy pop
	debug { (popped matrix) ds svgcmatrix dm dl } if
	Grestore end } def
/setmatrix { svgdict begin Setmatrix
	(SETMATRIX CALLED! Results will be incorrect.) ds dl
	% matrix currentmatrix matrix invertmatrix 
	% simatrix svgcmatrix Concatmatrix pop
	end } def
/concatmatrix { svgdict begin Concatmatrix end } def
/concat { svgdict begin
	dup svgcmatrix svgcmatrix Concatmatrix pop
	Concat end } def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

/pstosvg {
	svgdict begin writeprologue end
	currentfile cvx exec
	svgdict begin 
	writeepilogue
	ofile closefile
	end
} def

pstosvg

%
% End of ps2svg.ps
%
