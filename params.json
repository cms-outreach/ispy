{"name":"ispy","tagline":"iSpy Client","body":"<h1>What is this?</h1>\r\niSpy is a powerful and lightweight event display used for the CMS experiment at the LHC. It reads in an ig file which contains event and geometry information.\r\n\r\n<h1>What is an ig file?</h1>\r\nA .ig file is a zip archive (unzippable via unzip or similar) containing one file per event. Each event file uses a relational database-like structure, described using JSON.\r\n\r\n<h2>ig-file format:</h2>\r\nig files have a flat directory structure with a separate directory per run (run directory). Each run directory contains one or more files describing a given event (ig event file) each. The associated run number and the event number are, respectively, the file name for the run directory and for the ig event file.\r\n\r\nThe ig-event-file format is a valid JSON or python dictionary. The format defines three categories of objects: types, collections and associations-sets.\r\n\r\nSyntax:\r\n\r\nig-event-file ::= { 'Types': type-descriptions, 'Collections': collections, 'Associations': association-sets }\r\n\r\n<h3>Types</h3>\r\nTypes are a mapping of a type-name and its associated type-description. The type-description defines the types of the objects that are to be found in the Collection which uses the same string as the type-name to be identified. The attributes (i.e. columns) of a Collection are defined by an attribute name and an attribute type. The former is just a string label, while the second one define the kind of object which is stored in the attribute, all of which have a C++ equivalent. Possible attribute types include:\r\n\r\n<ul>\r\n<li>simple numeric types: <em>int</em>, <em>long</em>, and <em>double</em>, which map to their C++ equivalents.</li>\r\n<li>text-like elements: <em>string</em>, which map to <code>std::string</code></li>\r\n<li>vector like quantities: <em>v2d</em>, <em>v3d</em>, <em>v4d</em> which map to <code>IgV2d</code>, <code>IgV3d</code>, <code>IgV4d</code>.</li>\r\n</ul>\r\n\r\nSyntax:\r\n\r\ntype-descriptions ::= { type-description, ... }\r\n\r\ntype-description ::= \"type-name\": [attributes-description, ...]\r\n\r\ntype-name ::= string-literal\r\n\r\nattribute-description ::= [\"attribute-name\", \"attribute-type\"]\r\n\r\nattribute-name ::= string-literal\r\n\r\nstring-literal ::= [A-Za-z_][A-Za-z_/0-9]*\r\n\r\nattribute-type ::= int OR long OR double OR string OR v2d OR v3d OR v4d\r\n\r\n<h3>Collections</h3>\r\n\r\nCollections are arrays of rows, identified by a collection-name. The collection-name is a string-literal which matches one of the type-names defined in types. Rows are arrays of values, where the type of the value matches the attribute-type of the attribute-description with the same position in the type-description which has its type-name matching the collection name.\r\n\r\nThis is the actual data contained in a file.\r\n\r\nSyntax:\r\n\r\ncollections ::= {collection, ... }\r\n\r\ncollection ::= \"type-name\": [row, ...]\r\n\r\nrow ::= [ value, ...]\r\n\r\nvalue ::= string-literal OR numeric-literal OR vector-literal\r\n\r\nnumeric-literal ::= [0-9]+[.]*[0-9]*\r\n\r\nvector-literal ::= [numeric-literal, numeric-literal, ...]\r\n\r\n<h3>Association sets</h3>\r\n\r\nAn association defines a relationship between two rows found in any (possibly the same) collections. They are uniquely identified by two couples of numbers, the first one uniquely identifying the left object of the association, the other identifying the right object. The first element of this couple of numbers is the so called collection id while the second one is called object id. The collection id is the index of the collection type within the Types table, while the object id is the index of the object within the collection. Such a couple of numbers is called object reference. An association-set is an array of associations which share some common meaning decided by the writer of the ig-file.\r\n\r\nSyntax:\r\n\r\nassociations-sets ::= { association-set, ... }\r\n\r\nassociation-set ::= \"association-set-name\": [association, ...]\r\n\r\nassociation ::= [left-object, right-object]\r\n\r\nleft-object ::= object-reference\r\n\r\nright-object ::= object-reference\r\n\r\nobject-reference ::= [collection-id, object-id]\r\n\r\ncollection-id ::= index-literal\r\n\r\nobject-id ::= index-literal\r\n\r\nindex-literal ::= [0-9]+\r\n\r\n<h3>Example</h3>\r\n\r\nHere is a simple example of what an ig file looks like.\r\n```\r\n{\r\n \"Types\": {\"Tracks_V1\": [[\"x\", \"double\"],[\"y\", \"double\"],[\"z\", \"double\"],\r\n                         [\"px\", \"double\"],[\"py\",\"double\"],[\"pz\", \"double\"]],\r\n           \"Clusters_V1\": [[\"x\", \"double\"],[\"y\", \"double\"],[\"z\", \"double\"],\r\n                           [\"e\", \"double\"]]\r\n          },\r\n \"Collections\": {\"Tracks_V1\": [[0, 0, 0, 0, 0, 0],\r\n                               [1, 1, 1, 1, 1, 1],\r\n                               [2, 2, 2, 2, 2, 2],\r\n                               [3, 3, 3, 3, 3, 3],\r\n                               [4, 4, 4, 4, 4, 4],\r\n                               [5, 5, 5, 5, 5, 5],\r\n                               [6, 6, 6, 6, 6, 6],\r\n                               [7, 7, 7, 7, 7, 7],\r\n                               [8, 8, 8, 8, 8, 8],\r\n                               [9, 9, 9, 9, 9, 9]],\r\n                 \"Clusters_V1\": [[0, 0, 0, 0],\r\n                                 [1, 1, 1, 1],\r\n                                 [2, 2, 2, 2],\r\n                                 [3, 3, 3, 3],\r\n                                 [4, 4, 4, 4],\r\n                                 [5, 5, 5, 5],\r\n                                 [6, 6, 6, 6],\r\n                                 [7, 7, 7, 7],\r\n                                 [8, 8, 8, 8],\r\n                                 [9, 9, 9, 9]]\r\n                 },\r\n \"Associations\": {\"TrackClusters_V1\": [[[0, 0], [1, 0]],\r\n                                       [[0, 1], [1, 1]],\r\n                                       [[0, 2], [1, 2]],\r\n                                       [[0, 3], [1, 3]],\r\n                                       [[0, 4], [1, 4]],\r\n                                       [[0, 5], [1, 5]],\r\n                                       [[0, 6], [1, 6]],\r\n                                       [[0, 7], [1, 7]],\r\n                                       [[0, 8], [1, 8]],\r\n                                       [[0, 9], [1, 9]]],\r\n                  \"TrackClusters2_V1\": [[[0, 0], [1, 0]],\r\n                                        [[0, 1], [1, 0]],\r\n                                        [[0, 2], [1, 0]],\r\n                                        [[0, 3], [1, 0]],\r\n                                        [[0, 4], [1, 0]],\r\n                                        [[0, 5], [1, 0]],\r\n                                        [[0, 6], [1, 0]],\r\n                                        [[0, 7], [1, 0]],\r\n                                        [[0, 8], [1, 0]],\r\n                                        [[0, 9], [1, 0]]]\r\n                  }\r\n}\r\n```\r\n<h3>APIs</h3>\r\nAPIs for ig files can be found on github:\r\n<ul>\r\n<li><a href=\"https://github.com/tpmccauley/igfiles\">C++</a>\r\n<li><a href=\"https://github.com/tpmccauley/pyig\">python</a>\r\n</ul>\r\n\r\n<h1>How do I make my own ig files?</h1>\r\nSee an example <a href=\"https://github.com/cms-outreach/ispy-analyzers/blob/Run2010B/README.md\">here.</a>\r\n\r\n<h1>How do build it?</h1>\r\niSpy uses among other libraries Qt, Coin3D, and SoQt. The relative simplicity of your build (which uses cmake) may vary. That said, in order to give it a try:\r\n```\r\ngit clone https://github.com/cms-outreach/ispy\r\ncd ispy\r\ngit checkout linux64 (or git checkout mavericks)\r\ncd externals\r\ncmake .\r\nmake\r\ncd ../\r\ncmake .\r\nmake\r\n```\r\n\r\n<h1>How do I run it?</h1>\r\nOnce downloaded (or built), iSpy should be a full-bound executable. You can double-click it or run it from the command line (you may need to chmod +x). Some files are provided via the www. You can read local files from the File menu or specify them on the command line as an argument.\r\n\r\nAlternatively, you can try the <a href=\"https://github.com/cms-outreach/ispy-online\">browser-based version </a> (written in JavaScript) either offline or online.\r\n\r\n<h1>How do I change the colors/cuts, etc.?</h1>\r\niSpy uses so-called ISS files (mimicking HTML CSS files) that define the style and (graphics) cuts for any given collection displayed.\r\n\r\nWhile a default ISS file is compiled in the executable, the user can specify his/her own file at startup time by simply passing its path on the command line.\r\n\r\nThe syntax of ISS is as similar as possible to the one of the usual CSS file encountered in web pages:\r\n```\r\n      rule {\r\n        property-name: property-value;\r\n        ...\r\n      }\r\n```   \r\n\r\nWhere rule is used to identify the collection name for the associated properties found in the curly brackets.\r\n\r\nNotice that for the moment, due to limitations of the implementation, the rule is not really cascading and you have to fully specify all the properties related to a given collection. This will change in future.\r\n\r\nTo define the default style you can use the * rule and define values for all the supported properties. At the moment the default \"*\" rule is:\r\n```\r\n      // Default style.\r\n      * {\r\n        diffuse-color: rgb(0.7, 0.7, 0.7);\r\n        transparency: 0.0;\r\n        line-width: 1.0;\r\n        line-pattern: 0xffff;\r\n        font-size: 12;\r\n        font-family: Arial;\r\n        draw-style: solid;\r\n        marker-shape: square;\r\n        marker-size: normal;\r\n        marker-style: filled;\r\n        text-align: left;\r\n        min-energy: 0.2;\r\n        max-energy: 5.0;\r\n        energy-scale: 1.0;\r\n        left: 0.;\r\n        top: 0.;\r\n      }\r\n```      \r\n\r\nFor a detailed description of all the properties see the list below.\r\n\r\nBesides all the collections to be found in the ig file, there are two special collections you can configure as well: Background and Internal_Limits_V1. The former obviously controls the background color (via the diffuse-color attribute), while the latter corresponds to the overlay which displays the graphics cuts.\r\n\r\n<h2>Properties reference</h2>\r\n<ul>\r\n<li>diffuse-color: the main color to be used to display the collection. It can be specified either in the HTML form #RRGGBB or in the CSS form rgb(r, g, b), where RR, GG, BB are between 0 and 255, while r, g, b are between 0 and 1.</li>\r\n<li>transparency: the transparency level, between 0 and 1 of the object displayed to represent the collection.</li>\r\n<li>line-width: the width of all the lines displayed for a given collection.</li>\r\n<li>line-pattern: an hex number defining the bitmask for the line pattern. E.g. Use 0xf0f0 for a dashed line with four pixel per dash.</li>\r\n<li>font-size: the font size of the main text in the annotation associated to the collection. All other text strings (e.g. titles) will be scaled relative to this size.</li>\r\n<li>font-family: the font family of the main text in the annotation.</li>\r\n<li>draw-style: the style to use to draw all the shapes associated to the collection. Can be either solid, lines, points.</li>\r\n<li>marker-shape: the shape of markers used for the collection. It can be either square, cross, circle, plus.</li>\r\n<li>marker-size: the size of markers used for the collection. It can be either normal, big, huge.</li>\r\n<li>marker-style: the style of markers used for the collection. It can be either filled or outline. The filled value only applies to circle and square markers.</li>\r\n<li>text-align: the alignment of the annotation text. Can be either left, right, center.</li>\r\n<li>min-energy: if applicable, the minimal energy required for an element in the collection to be displayed. In GeV.</li>\r\n<li>max-energy: if applicable, the maximum energy required for an element in the collection to be displayed. In GeV.</li>\r\n<li>energy-scale: if applicable, the scale to use to display objects in the collection that vary in size / color according to their energy. In m / GeV.</li>\r\n<li>top, left: when left aligned, the position of the top-left corner of an annotation. The position of the top-right corner in the case of right alignement. Varies from (0,0) to (1,1), which are the coordinates for the top-left and bottom-right corners.</li>\r\n</ul>\r\n\r\n<h1>How do I change the view contents, the camera position, etc.?</h1>\r\n\r\nIn order to configure which view are to be shown and what to show in each view, iSpy uses a so-called IML file. Such a file is a normal xml file with the following structure:\r\n```\r\n       <?xml version=\"1.0\" encoding='UTF-8'?>\r\n       <layout>\r\n       <camera position=\"-18.1, 8.6, 14.0\" pointAt=\"0, 0, 0\" scale=\"10.6\" orthographic=\"true\" rotating=\"true\">\r\n         <visibilityGroup>\r\n         <view label=\"Standard 3D View\" specialised=\"true\" autoplay=\"true\">\r\n           <collection label=\"Provenance/Event information\"\r\n                      spec=\"Event_V1:time:run:event:ls:orbit:bx\"\r\n                      draw=\"make3DEvent\"/>\r\n         </view>\r\n         </visibilityGroup>\r\n       </camera>\r\n       </layout>\r\n```      \r\n\r\nThe ```<layout/>``` tag is just the top-level container.\r\n\r\nThe ```<camera/>``` tag specifies where the default camera should be put for the contained views.\r\n\r\nThe ```<visibilityGroup/>``` tag specifies where the default camera should be put for the contained views.\r\n\r\nThe ```<view/>``` tag specifies properties of the a page view. It contains a set of ```<collection/>```tags, as many as one per collection to be displayed.\r\n\r\nAs for ISS files, a default IML file is compiled in the application but the user can specify his own by passing it on the command line.\r\n\r\nAttributes of the ```<camera/>``` tag\r\n<ul>\r\n<li>position: the position of the camera.\r\n<li>pointAt: the point at which the camera points at\r\n<li>scale: the scale factor for elements shown\r\n<li>orthographic: either true or false indicates whether the camera is orthographic or not.\r\n<li>rotating: either true or false, indicates whether the camera can rotate or not. False means that the camera is in panning mode.\r\n</ul>\r\n\r\nAttributes of the ```<view/>``` tag\r\n<ul>\r\n<li>label: the name of the view as shown in the view selector widget\r\n<li>autoplay: either true or false, indicates whether the view has to be shown in autoplay mode.\r\n</ul>\r\n\r\nAttributes of the ```<collection/>``` tag\r\n<ul>label: the name of the collection, as shown in the tree view. Use a (single) slash to separate between the two levels\r\n<li>spec: a specification that has to be matched by the collection and its properties. This is a column separated list, where the first item is the name of the collection while the subsequent items are the properties that have to be matched in order for the drawing method to apply.\r\n<li>association: the name of an association set which links the elements of the collection specified by \"spec\" to those specified by \"other\". This attribute is optional.\r\n<li>other: similar to spec, it defines a second collection whose items are connected to the one specified in \"spec\" thanks to the associations specified in \"associations\"\r\n<li>draw: the name of the drawing method to be executed on the collection where the specification found in spec applies.\r\n</ul>\r\n\r\nList of draw operations\r\n<ul>\r\n<li>make3DAnyBox: draw a box in 3D, without any special projection. Coordinates from the vertices are picked up from the following columns of the collection:\r\n\r\n```\r\n        front_1\r\n        front_2\r\n        front_3\r\n        front_4\r\n        back_1\r\n        back_2\r\n        back_3\r\n        back_4\r\n```   \r\n\r\n<li>makeAnyBox: draw a box in 3D, using the projection specified for the given view. Coordinates from the vertices are picked up from the following columns of the collection:\r\n\r\n```\r\n        front_1\r\n        front_2\r\n        front_3\r\n        front_4\r\n        back_1\r\n        back_2\r\n        back_3\r\n        back_4\r\n```\r\n\r\n<li>make3DAnyLine: draws a generic set of lines using the coordinates found in the columns \"pos1\" and \"pos2\" of the given collection.\r\n<li>make3DAnyPoint: draws a generic set of points. The pos column of the collection is used to draw.\r\n<li>make3DCSCStripDigis\r\n<li>make3DCSCWireDigis\r\n<li>make3DCaloClusters\r\n<li>make3DCaloTowers\r\n<li>make3DDTDigis\r\n<li>make3DDTRecHits\r\n<li>make3DEnergyBoxes\r\n<li>make3DEnergyTowers\r\n<li>make3DEvent\r\n<li>make3DHLTrigger\r\n<li>make3DJetShapes\r\n<li>make3DL1Trigger\r\n<li>make3DLimits\r\n<li>make3DMET\r\n<li>make3DPhoton\r\n<li>makeRZPhoton\r\n<li>makeAnyPhoton\r\n<li>make3DPointSetShapes\r\n<li>makeRZPointSetShapes\r\n<li>makeAnyPointSetShapes\r\n<li>make3DPreshowerTowers\r\n<li>make3DRPCRecHits\r\n<li>make3DSegmentShapes\r\n<li>make3DTechTrigger\r\n<li>make3DTrackPoints\r\n<li>make3DTrackingParticles\r\n<li>make3DTracks\r\n<li>makeRZTracks\r\n<li>makeAnyTracks\r\n<li>make3DTracksNoVertex\r\n<li>make3DTriggerObject\r\n<li>makeLegoCaloTowers\r\n<li>makeLegoEcalRecHits\r\n<li>makeLegoGrid\r\n<li>makeLegoHcalRecHits\r\n<li>makeLegoJets\r\n<li>makeRZECalRecHits\r\n<li>makeRZEPRecHits\r\n<li>makeRZHCalRecHits\r\n</ul>\r\n\r\n<h1>Contributors</h1>\r\n<h2>iSpy contributors</h2>\r\nGeorge Alverson, Giulio Eulisse, Thomas McCauley, Lucas Taylor.\r\n<h2>Former contributors</h2>\r\nShahzad Muzaffar, Ianna Osborne, Lassi Tuura. \r\n\r\n<h1>Contact</h1>\r\n<a href=\"mailto:ispy-developers@cern.ch\">ispy-developers@cern.ch</a>\r\n\r\n<h1>Reference</h1>\r\nJ.Phys.Conf.Ser. 396 (2012) 022002 (DOI: <a href=\"http://dx.doi.org/10.1088/1742-6596/396/2/022002\">10.1088/1742-6596/396/2/022002</a>)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}