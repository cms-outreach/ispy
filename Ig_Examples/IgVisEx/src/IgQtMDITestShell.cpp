// IgQtMDITestShell.cpp: implementation of the IgQtMDITestShell class.
//
//////////////////////////////////////////////////////////////////////
#include "Ig_Examples/IgVisEx/interface/IgQtMDITestShell.h"
#include "Ig_Modules/IgVis/interface/IgQtMiscCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtResourceMgr.h"
#include "Ig_Modules/IgVis/interface/IgQtPhysTabsImpl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpointCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpoint.h"
#include "Ig_Modules/IgVis/interface/IgQtMDI.h"
#include "Ig_Modules/IgVis/interface/IgQtMDIShellBuilder.h"
#include "Ig_Modules/IgVis/interface/IgQtMDIShellFactory.h"

#include "qpopupmenu.h"
#include "qstatusbar.h"
#include "qtabwidget.h"
#include "qapplication.h"
#if defined(emit)
#undef emit
#endif

#include "Ig_Examples/IgVisEx/interface/TestScene.h"
#include <Inventor/VRMLnodes/SoVRMLViewpoint.h>

const QString IgQtMDITestShell::theShellName = QString( "IgQtMDITestShell" );
namespace {
  IgQtShellRegisterEntry e( QString( "IgQtMDITestShell" ), IgQtMDIShellBuilder<IgQtMDITestShell>::getInstance(), QString( "Test Shell (3D)" ) );
}

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

IgQtMDITestShell::IgQtMDITestShell( IgQtMDI* parent, SoQtFullViewer* aViewer ) :
IgQtMDIBaseShell( parent, aViewer ), fileAvailable(false)
{
	setUniqueName(theShellName); //overwrites the name generated by AbsShell
	event_number = 0; // a dummy event counter
	eventInput = NULL; // file of dummy events
	file->insertItem( "Build Scene", this, SLOT(buildSlot()));
	setCaption( "IgQtMDITestShell" );

	SoVRMLViewpoint *vOne = new SoVRMLViewpoint;
	vOne->position = SbVec3f(-18.9909, 8.54639, 5.2616);
	vOne->orientation = SbRotation(-0.236382, -0.567138, -0.0220663, 0.788664);
	vOne->fieldOfView = 0.785398;
	vOne->description = "TestView";
	IgQtViewpoint vp(vOne);
	vp.label = "Pre-Existing";
	if (views->addIvItem(vp, QString("TestView"))) topTwig->getIvNode()->addChild(vOne);
	buildSlot();

}

IgQtMDITestShell::~IgQtMDITestShell()
{
}

void IgQtMDITestShell::buildSlot()
{
	TestScene *testScene = new TestScene;
	testScene->setControlWidget(tabs->tabWidget);

	//  Can either addScene or (addStaticTwig+adornSlot)
	//  addScene(testScene,"TestScene");
	addStaticTwig(testScene); // so we can find it later
	adornSlot();
	setCaption("TestScene");
	//  connect(misc,SIGNAL(thresholdSignal(int)),testScene,SLOT(thresholdSlot(int)));
	parentMDI->addBrowser( this );

}

void IgQtMDITestShell::eventsSlot()
{
	// we have to get our own events. normally we would just pass on a request and do the clean-up
	// in eventNotifySlot
	IgQtMDIBaseShell::eventsSlot();
	QStatusBar* aBar = this->statusBar();
	QApplication::setOverrideCursor( waitCursor );
	// if we had more than one event in the file, should be able to make a static input and re-read
	// to get the next event
	if( !eventInput ) 
	{
		eventInput = new SoInput;
		fileAvailable = eventInput->openFile( "ThreeEvents.iv", true); //suppress error messages w/ 2nd arg
	}

	if( fileAvailable && eventInput->isValidFile()) 
	{		
		SoNode* node;
		if( SoDB::read( eventInput, node ) && node ) 
		{
			QString theCaption( "Event_" );
			QString num;
			theCaption += num.setNum( event_number++ );
			setCaption( theCaption );

			IgQtTwig* tree = IgQtTwig::addTwigFromScratch( node, false ); //will recurse down
			killVolatileTwigs();
			addVolatileTwig( tree );
		}
		else //assume we've hit EOF
		{
			eventInput->closeFile();
			fileAvailable = eventInput->openFile( "ThreeEvents.iv" );
			//			SoNode *node;
			if( SoDB::read( eventInput, node )) 
			{
				QString theCaption( "Event_" );

				QString num;
				theCaption += num.setNum( event_number++ );
				setCaption( theCaption );

				IgQtTwig* tree = IgQtTwig::addTwigFromScratch( node, false ); //will recurse down
				killVolatileTwigs();
				addVolatileTwig( tree );
			}
			else
			{
				exit (0); // a bit drastic, eh wot?
			}
		}
		aBar->message( "Got Event", 2000 );
	}
	else
	{
		aBar->message( "Failed to find event", 2000);
	}
	QApplication::restoreOverrideCursor();
}
void IgQtMDITestShell::eventNotifySlot()
{
}
const QString IgQtMDITestShell::shellName()
{
	return theShellName;
}











