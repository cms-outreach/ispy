// IgDemoExperiment2D: two-dimensional alternative to IgDemoExperiment
//
//////////////////////////////////////////////////////////////////////

#include "Ig_Examples/IgVisEx/interface/IgDemoExperiment2D.h"
#include "Ig_Modules/IgVis/interface/IgQtMDI.h"
#include "Ig_Examples/IgVisEx/interface/GenericDetector.h"
#include "Ig_Examples/IgVisEx/interface/GenericEvent.h"
// IGUANA features
#include "Ig_Modules/IgVis/interface/IgQtMiscCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtResourceMgr.h"
#include "Ig_Modules/IgVis/interface/IgQtPhysTabsImpl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpointCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpoint.h"
#include "Ig_Modules/IgVis/interface/IgQtTwig.h"
#include "Ig_Modules/IgVis/interface/IgQtTwigCallbackStruct.h"
#include "Ig_Modules/IgVis/interface/IgQtTwig2D.h"
#include "Ig_Modules/IgVis/interface/IgQtLayer.h"
#include "Ig_Modules/IgVis/interface/IgQtInfoStream.h"
#include "Ig_Modules/IgVis/interface/IgQt2DViewer.h"
#include "Ig_Modules/IgVis/interface/IgQtMDIShellBuilder.h"
#include "Ig_Modules/IgVis/interface/IgQtMDIShellFactory.h"

// Qt features
#include "qpopupmenu.h"
#include "qstatusbar.h"
#include "qtabwidget.h"
#include "qapplication.h"
// this fixes a conflict between the qt emit and a number of other packages which like the name as well
#if defined(emit)
#undef emit
#endif

// OpenInventor features
#include <Inventor/VRMLnodes/SoVRMLViewpoint.h>
#include <Inventor/nodes/SoClipPlane.h>

#include <Inventor/nodes/SoSelection.h>

class Detector; //forward reference: body at end of file

const QString IgDemoExperiment2D::theShellName = QString( "IgDemoExperiment2D" );
namespace {
    IgQtShellRegisterEntry e( QString( "IgDemoExperiment2D" ), IgQtMDIShellBuilder<IgDemoExperiment2D>::getInstance(), QString( "Demo Experiment (2D)" ) );
}
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

IgDemoExperiment2D::IgDemoExperiment2D( IgQtMDI* parent, SoQtFullViewer* /* aViewer */) :
IgQtMDIBaseShell( parent, NULL, false)
{
    setUniqueName(theShellName); //overwrites the name generated by AbsShell
    QWidget *view = new QWidget(this);
    setCentralWidget(view);
    theViewer = new IgQt2DViewer( view,"Generic 2D Experiment");
    IgQtMDIBaseShell::buildWidget(view);
    // Replace standard sceneTwig with a 2D version
    // must remove callbacks before removing old sceneTwig
    if (sceneTwig && sceneTwig->getIvNode()->getTypeId().isDerivedFrom(SoSelection::getClassTypeId())) 
    {
	theViewer->redrawOnSelectionChange(NULL);
    }
    topTwig->removeChild(sceneTwig);
    // add the new 2D scene
    IgQtTwig2D *tempScene = new IgQtTwig2D("Scene");
    // want scene to be selectable for picking
    tempScene->makeSelectable();
    sceneTwig = tempScene;
    topTwig->addChild(sceneTwig);

    IgQtTwigCallbackStruct *selectCBStruct = 
	new IgQtTwigCallbackStruct(sceneTwig,theViewer->getSceneManager());
    if (sceneTwig->getIvNode()->getTypeId().isDerivedFrom(SoSelection::getClassTypeId())) 
    {
	SoSelection *selectNode = static_cast<SoSelection*>(sceneTwig->getIvNode());
	selectNode->policy.setValue(SoSelection::SHIFT);
	selectNode->addSelectionCallback(IgQtTwig::selectionCB, selectCBStruct);
	selectNode->setPickFilterCallback(IgQtTwig::pickCB, selectCBStruct);
	theViewer->redrawOnSelectionChange(selectNode);
    }
    file->insertItem( "Build Scene", this, SLOT(buildSlot()));
    setCaption( theShellName );
    parentMDI->addBrowser( this );


    // since this is a stand-alone, we jumper the event processing
    connect(this,SIGNAL(needTriggerSignal()),this,SLOT(eventNotifySlot()));
}

IgDemoExperiment2D::~IgDemoExperiment2D()
{
}

void IgDemoExperiment2D::buildSlot()
{
  // tell the world we're starting
  QStatusBar *aBar = this->statusBar();
  aBar->message( "Building Scene");
  QApplication::setOverrideCursor(waitCursor);

  // build the detector description
  IgQtTwig2D *detector = new IgQtTwig2D("Detector");
  IgQtTwig *detector3d = new IgQtTwig("Spacer");
  SoClipPlane *plane = new SoClipPlane;
  plane->plane = SbPlane(SbVec3f(0.F,0.F,-1.0F),0.F);
  detector3d->addIvNode(plane);
  detector3d->addChild(new Infrastructure);
  detector3d->addChild(new Tracker);
  detector3d->addChild(new Ecal);
  detector3d->addChild(new Hcal);
  detector3d->addChild(new ForwardCalorimeter);
  detector3d->addChild(new MuonChambers);

  
  detector->addChild(detector3d);


  // currently the detector is static 
  addStaticTwig(detector); // so we can find it later
  adornSlot();

  // event is dynamic
  IgQtTwig2D *event = new IgQtTwig2D("Event");
  event->addChild(new Event);

  addVolatileTwig ( event );
  IgQtTwig2D *t = dynamic_cast<IgQtTwig2D*>(sceneTwig);
  t->resize();
  
  
  setCaption("Generic Collider Experiment 2D");
  // give back the cursor
  aBar->message("Detector Built...",2000);
  QApplication::restoreOverrideCursor();
 
}

void IgDemoExperiment2D::eventsSlot()
{
// emit needTriggerSignal();
    needTriggerSignal();
}
void IgDemoExperiment2D::eventNotifySlot()
{
	
    QStatusBar* aBar = this->statusBar();
	aBar->message( "Getting an Event");
	QApplication::setOverrideCursor( waitCursor );


	// event processing here
	clearVolatileTwigs();

	IgQtTwig2D *t = dynamic_cast<IgQtTwig2D*>(sceneTwig);
	t->resize();

    aBar->message( "Got Event", 2000 );
	QApplication::restoreOverrideCursor();

}
const QString IgDemoExperiment2D::shellName()
{
	return theShellName;
}
