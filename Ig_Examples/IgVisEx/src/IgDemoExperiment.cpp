// IgDemoExperiment
//
//////////////////////////////////////////////////////////////////////

#include "Ig_Examples/IgVisEx/interface/IgDemoExperiment.h"
#include "Ig_Modules/IgVis/interface/IgQtMDI.h"
#include "Ig_Examples/IgVisEx/interface/GenericDetector.h"
#include "Ig_Examples/IgVisEx/interface/GenericEvent.h"
// IGUANA features
#include "Ig_Modules/IgVis/interface/IgQtMiscCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtResourceMgr.h"
#include "Ig_Modules/IgVis/interface/IgQtPhysTabsImpl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpointCtl.h"
#include "Ig_Modules/IgVis/interface/IgQtViewpoint.h"
#include "Ig_Modules/IgVis/interface/IgQtTwig.h"
#include "Ig_Modules/IgVis/interface/IgQtInfoStream.h"

#include "Ig_Modules/IgVis/interface/IgQtMDIShellBuilder.h"
#include "Ig_Modules/IgVis/interface/IgQtMDIShellFactory.h"

// Qt features
#include "qpopupmenu.h"
#include "qstatusbar.h"
#include "qtabwidget.h"
#include "qapplication.h"
// this fixes a conflict between the qt emit and a number of other packages which like the name as well
#if defined(emit)
#undef emit
#endif

// OpenInventor features
#include <Inventor/VRMLnodes/SoVRMLViewpoint.h>

class Detector; //forward reference: body at end of file

const QString IgDemoExperiment::theShellName = QString( "IgDemoExperiment"  );
namespace {
    IgQtShellRegisterEntry e(QString( "IgDemoExperiment"), IgQtMDIShellBuilder<IgDemoExperiment>::getInstance(), std::string("Demo Experiment (3D)") );
}
//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

IgDemoExperiment::IgDemoExperiment( IgQtMDI* parent, SoQtFullViewer* aViewer ) :
IgQtMDIBaseShell( parent, aViewer )
{
    setUniqueName("IgDemoExperiment"); //overwrites the name generated by AbsShell
    file->insertItem( "Build Scene", this, SLOT(buildSlot()));
    setCaption( "IGUANA Generic Experiment" );

    SoVRMLViewpoint *vOne = new SoVRMLViewpoint;
    vOne->position = SbVec3f(-18.9909, 8.54639, 5.2616);
    vOne->orientation = SbRotation(-0.236382, -0.567138, -0.0220663, 0.788664);
    vOne->fieldOfView = 0.785398;
    vOne->description = "TestView";
    IgQtViewpoint vp(vOne);
    vp.label = "Pre-Existing";
    if (views->addIvItem(vp, QString("TestView"))) topTwig->getIvNode()->addChild(vOne);
    buildSlot();
    parentMDI->addBrowser( this );
    // since this is a stand-alone, we jumper the event processing
    connect(this,SIGNAL(needTriggerSignal()),this,SLOT(eventNotifySlot()));

}

IgDemoExperiment::~IgDemoExperiment()
{
}

void IgDemoExperiment::buildSlot()
{
    // tell the world we're starting
    QStatusBar *aBar = this->statusBar();
    aBar->message( "Building Scene");
    QApplication::setOverrideCursor(waitCursor);

    // build the detector description
    IgQtTwig *detector = new Detector;

    // currently the detector is static 
    addStaticTwig(detector); // so we can find it later
    adornSlot();

    // event is dynamic
    IgQtTwig *event = new Event;
    addVolatileTwig ( event );


    setCaption("Generic Collider Experiment");
    // give back the cursor
    aBar->message("Detector Built...",2000);
    QApplication::restoreOverrideCursor();

}

void IgDemoExperiment::eventsSlot()
{
    // emit needTriggerSignal();
    needTriggerSignal();
}
void IgDemoExperiment::eventNotifySlot()
{

    QStatusBar* aBar = this->statusBar();
    aBar->message( "Getting an Event");
    QApplication::setOverrideCursor( waitCursor );


    // event processing here
    clearVolatileTwigs();

    aBar->message( "Got Event", 2000 );
    QApplication::restoreOverrideCursor();

}
const QString IgDemoExperiment::shellName()
{
	return theShellName;
}



























